<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * This is the model class for table "company_organizes".
 *
 * @property \App\ClearCompany $clear_companies
 * @property $this $name
 * @property string $id
 * @property string $name 组织结构名称
 * @property int $status 0-禁用，1-启用
 * @property int $parent_id
 * @property string $created_at
 * @property string $updated_at
 * @property string $deleted_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\ClearCompany[] $clear_companies_has_many
 * @property-read mixed $full_name
 * @property-read \App\ClearCompany $test
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize newQuery()
 * @method static \Illuminate\Database\Query\Builder|\App\CompanyOrganize onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize query()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize whereParentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\CompanyOrganize whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\App\CompanyOrganize withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\CompanyOrganize withoutTrashed()
 * @mixin \Eloquent
 */
class CompanyOrganize extends Model
{
    use SoftDeletes;
    protected $fillable = ['name'];
    protected $attributes = [
        'status'=>1,
        'parent_id'=>0
    ];
    //
//    protected $dateFormat = 'U';

    function clear_companies(){
        return $this->hasOne('\App\ClearCompany','id','id');
    }

    function test(){
        return $this->belongsTo('App\ClearCompany','id','id');
    }

    function clear_companies_has_many(){
        return $this->hasMany('\App\ClearCompany','status','id');
    }

    function getNameAttribute($value){
        return ucfirst($value)."===";
    }

    function getFullNameAttribute($value){
        return "{$this->id}"."+".$this->name;
    }

//    function getRouteKeyName()
//    {
//        return 'name';
//        return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
//    }
}
